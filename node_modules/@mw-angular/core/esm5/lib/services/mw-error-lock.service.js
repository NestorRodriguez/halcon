/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
var MwErrorLockService = /** @class */ (function () {
    function MwErrorLockService() {
        this.errorLockSubject = new BehaviorSubject(null);
    }
    /**
     * @return {?}
     */
    MwErrorLockService.prototype.getErrorLock = /**
     * @return {?}
     */
    function () {
        return this.errorLockSubject.asObservable();
    };
    /**
     * @param {?} errorLock
     * @return {?}
     */
    MwErrorLockService.prototype.setErrorLock = /**
     * @param {?} errorLock
     * @return {?}
     */
    function (errorLock) {
        this.errorLockSubject.next(errorLock);
    };
    MwErrorLockService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */ MwErrorLockService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MwErrorLockService_Factory() { return new MwErrorLockService(); }, token: MwErrorLockService, providedIn: "root" });
    return MwErrorLockService;
}());
export { MwErrorLockService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MwErrorLockService.prototype.errorLockSubject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXctZXJyb3ItbG9jay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG13LWFuZ3VsYXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tdy1lcnJvci1sb2NrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7QUFHbkQ7SUFBQTtRQUlVLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFxQixJQUFJLENBQUMsQ0FBQztLQVMxRTs7OztJQVBDLHlDQUFZOzs7SUFBWjtRQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzlDLENBQUM7Ozs7O0lBRUQseUNBQVk7Ozs7SUFBWixVQUFhLFNBQTZCO1FBQ3hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Z0JBWkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OzZCQU5EO0NBaUJDLEFBYkQsSUFhQztTQVZZLGtCQUFrQjs7Ozs7O0lBQzdCLDhDQUF5RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTXdFcnJvckxvY2sgfSBmcm9tICcuLi9lbnRpdGllcy9tdy1lcnJvci1sb2NrJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE13RXJyb3JMb2NrU2VydmljZSB7XG4gIHByaXZhdGUgZXJyb3JMb2NrU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8TXdFcnJvckxvY2sgfCBudWxsPihudWxsKTtcblxuICBnZXRFcnJvckxvY2soKTogT2JzZXJ2YWJsZTxNd0Vycm9yTG9jayB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5lcnJvckxvY2tTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgc2V0RXJyb3JMb2NrKGVycm9yTG9jazogTXdFcnJvckxvY2sgfCBudWxsKTogdm9pZCB7XG4gICAgdGhpcy5lcnJvckxvY2tTdWJqZWN0Lm5leHQoZXJyb3JMb2NrKTtcbiAgfVxufVxuIl19