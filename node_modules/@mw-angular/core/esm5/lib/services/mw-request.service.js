/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, Optional } from '@angular/core';
import { REQUEST } from '@nguniversal/express-engine/tokens';
import { MwPlatformService } from './mw-platform.service';
import * as i0 from "@angular/core";
import * as i1 from "./mw-platform.service";
import * as i2 from "@angular/common";
import * as i3 from "@nguniversal/express-engine/tokens";
var MwRequestService = /** @class */ (function () {
    function MwRequestService(mwPlatformService, document, request) {
        this.mwPlatformService = mwPlatformService;
        this.document = document;
        this.request = request;
    }
    /**
     * @return {?}
     */
    MwRequestService.prototype.hasRequest = /**
     * @return {?}
     */
    function () {
        return (this.mwPlatformService.isServer() && this.request !== null) || this.mwPlatformService.isBrowser();
    };
    /**
     * Example localhost:5000 | www.domain.com
     */
    /**
     * Example localhost:5000 | www.domain.com
     * @return {?}
     */
    MwRequestService.prototype.getHost = /**
     * Example localhost:5000 | www.domain.com
     * @return {?}
     */
    function () {
        /** @type {?} */
        var host;
        if (this.mwPlatformService.isServer()) {
            if (this.request === null) {
                throw new Error('Request object in not set.');
            }
            host = this.request.get('host');
        }
        else if (this.mwPlatformService.isBrowser()) {
            host = this.document.location.host;
        }
        else {
            throw new Error('Unknown platform.');
        }
        if (typeof host === 'undefined') {
            throw new Error('Host is undefined.');
        }
        return host;
    };
    /**
     * Example http://localhost:5000 | https://www.domain.com
     */
    /**
     * Example http://localhost:5000 | https://www.domain.com
     * @return {?}
     */
    MwRequestService.prototype.getLocationOrigin = /**
     * Example http://localhost:5000 | https://www.domain.com
     * @return {?}
     */
    function () {
        /** @type {?} */
        var locationOrigin;
        if (this.mwPlatformService.isServer()) {
            if (this.request === null) {
                throw new Error('Request object in not set.');
            }
            /** @type {?} */
            var host = this.request.get('host');
            if (typeof host === 'undefined') {
                throw new Error('Host is undefined.');
            }
            /** @type {?} */
            var protocol = this.request.protocol;
            locationOrigin = protocol + "://" + host;
        }
        else if (this.mwPlatformService.isBrowser()) {
            locationOrigin = this.document.location.origin;
        }
        else {
            throw new Error('Unknown platform.');
        }
        return locationOrigin;
    };
    /**
     * Example: if url is https://www.domain.com/en/about?qp=1 method returns '/en/about'
     */
    /**
     * Example: if url is https://www.domain.com/en/about?qp=1 method returns '/en/about'
     * @return {?}
     */
    MwRequestService.prototype.getLocationPathname = /**
     * Example: if url is https://www.domain.com/en/about?qp=1 method returns '/en/about'
     * @return {?}
     */
    function () {
        /** @type {?} */
        var locationPathname;
        if (this.mwPlatformService.isServer()) {
            if (this.request === null) {
                throw new Error('Request object in not set.');
            }
            locationPathname = this.request.path;
        }
        else if (this.mwPlatformService.isBrowser()) {
            locationPathname = this.document.location.pathname;
        }
        else {
            throw new Error('Unknown platform.');
        }
        return locationPathname;
    };
    MwRequestService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    MwRequestService.ctorParameters = function () { return [
        { type: MwPlatformService },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [REQUEST,] }] }
    ]; };
    /** @nocollapse */ MwRequestService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MwRequestService_Factory() { return new MwRequestService(i0.ɵɵinject(i1.MwPlatformService), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(i3.REQUEST, 8)); }, token: MwRequestService, providedIn: "root" });
    return MwRequestService;
}());
export { MwRequestService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MwRequestService.prototype.mwPlatformService;
    /**
     * @type {?}
     * @private
     */
    MwRequestService.prototype.document;
    /**
     * @type {?}
     * @private
     */
    MwRequestService.prototype.request;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXctcmVxdWVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG13LWFuZ3VsYXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tdy1yZXF1ZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRTdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7OztBQUUxRDtJQUlFLDBCQUNVLGlCQUFvQyxFQUNsQixRQUFhLEVBRy9CLE9BQWdCO1FBSmhCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDbEIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUcvQixZQUFPLEdBQVAsT0FBTyxDQUFTO0lBQ3ZCLENBQUM7Ozs7SUFFSixxQ0FBVTs7O0lBQVY7UUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzVHLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCxrQ0FBTzs7OztJQUFQOztZQUNNLElBQXdCO1FBRTVCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3JDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQzthQUMvQztZQUVELElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqQzthQUFNLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQzdDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7U0FDcEM7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUN0QztRQUVELElBQUksT0FBTyxJQUFJLEtBQUssV0FBVyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILDRDQUFpQjs7OztJQUFqQjs7WUFDTSxjQUFzQjtRQUUxQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNyQyxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxFQUFFO2dCQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7YUFDL0M7O2dCQUVLLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFFckMsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXLEVBQUU7Z0JBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQzthQUN2Qzs7Z0JBRUssUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUTtZQUN0QyxjQUFjLEdBQU0sUUFBUSxXQUFNLElBQU0sQ0FBQztTQUMxQzthQUFNLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQzdDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7U0FDaEQ7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUN0QztRQUVELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCw4Q0FBbUI7Ozs7SUFBbkI7O1lBQ00sZ0JBQXdCO1FBRTVCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3JDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQzthQUMvQztZQUVELGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1NBQ3RDO2FBQU0sSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDN0MsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1NBQ3BEO2FBQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDdEM7UUFFRCxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7O2dCQXhGRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQUpRLGlCQUFpQjtnREFRckIsTUFBTSxTQUFDLFFBQVE7Z0RBQ2YsUUFBUSxZQUNSLE1BQU0sU0FBQyxPQUFPOzs7MkJBZG5CO0NBK0ZDLEFBekZELElBeUZDO1NBdEZZLGdCQUFnQjs7Ozs7O0lBRXpCLDZDQUE0Qzs7Ozs7SUFDNUMsb0NBQXVDOzs7OztJQUN2QyxtQ0FFd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSRVFVRVNUIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2V4cHJlc3MtZW5naW5lL3Rva2Vucyc7XG5pbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBNd1BsYXRmb3JtU2VydmljZSB9IGZyb20gJy4vbXctcGxhdGZvcm0uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBNd1JlcXVlc3RTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBtd1BsYXRmb3JtU2VydmljZTogTXdQbGF0Zm9ybVNlcnZpY2UsXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55LFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChSRVFVRVNUKVxuICAgIHByaXZhdGUgcmVxdWVzdDogUmVxdWVzdCxcbiAgKSB7fVxuXG4gIGhhc1JlcXVlc3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLm13UGxhdGZvcm1TZXJ2aWNlLmlzU2VydmVyKCkgJiYgdGhpcy5yZXF1ZXN0ICE9PSBudWxsKSB8fCB0aGlzLm13UGxhdGZvcm1TZXJ2aWNlLmlzQnJvd3NlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4YW1wbGUgbG9jYWxob3N0OjUwMDAgfCB3d3cuZG9tYWluLmNvbVxuICAgKi9cbiAgZ2V0SG9zdCgpOiBzdHJpbmcge1xuICAgIGxldCBob3N0OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBpZiAodGhpcy5td1BsYXRmb3JtU2VydmljZS5pc1NlcnZlcigpKSB7XG4gICAgICBpZiAodGhpcy5yZXF1ZXN0ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWVzdCBvYmplY3QgaW4gbm90IHNldC4nKTtcbiAgICAgIH1cblxuICAgICAgaG9zdCA9IHRoaXMucmVxdWVzdC5nZXQoJ2hvc3QnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubXdQbGF0Zm9ybVNlcnZpY2UuaXNCcm93c2VyKCkpIHtcbiAgICAgIGhvc3QgPSB0aGlzLmRvY3VtZW50LmxvY2F0aW9uLmhvc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwbGF0Zm9ybS4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGhvc3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hvc3QgaXMgdW5kZWZpbmVkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBob3N0O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4YW1wbGUgaHR0cDovL2xvY2FsaG9zdDo1MDAwIHwgaHR0cHM6Ly93d3cuZG9tYWluLmNvbVxuICAgKi9cbiAgZ2V0TG9jYXRpb25PcmlnaW4oKTogc3RyaW5nIHtcbiAgICBsZXQgbG9jYXRpb25PcmlnaW46IHN0cmluZztcblxuICAgIGlmICh0aGlzLm13UGxhdGZvcm1TZXJ2aWNlLmlzU2VydmVyKCkpIHtcbiAgICAgIGlmICh0aGlzLnJlcXVlc3QgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1ZXN0IG9iamVjdCBpbiBub3Qgc2V0LicpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBob3N0ID0gdGhpcy5yZXF1ZXN0LmdldCgnaG9zdCcpO1xuXG4gICAgICBpZiAodHlwZW9mIGhvc3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSG9zdCBpcyB1bmRlZmluZWQuJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3RvY29sID0gdGhpcy5yZXF1ZXN0LnByb3RvY29sO1xuICAgICAgbG9jYXRpb25PcmlnaW4gPSBgJHtwcm90b2NvbH06Ly8ke2hvc3R9YDtcbiAgICB9IGVsc2UgaWYgKHRoaXMubXdQbGF0Zm9ybVNlcnZpY2UuaXNCcm93c2VyKCkpIHtcbiAgICAgIGxvY2F0aW9uT3JpZ2luID0gdGhpcy5kb2N1bWVudC5sb2NhdGlvbi5vcmlnaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwbGF0Zm9ybS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYXRpb25PcmlnaW47XG4gIH1cblxuICAvKipcbiAgICogRXhhbXBsZTogaWYgdXJsIGlzIGh0dHBzOi8vd3d3LmRvbWFpbi5jb20vZW4vYWJvdXQ/cXA9MSBtZXRob2QgcmV0dXJucyAnL2VuL2Fib3V0J1xuICAgKi9cbiAgZ2V0TG9jYXRpb25QYXRobmFtZSgpOiBzdHJpbmcge1xuICAgIGxldCBsb2NhdGlvblBhdGhuYW1lOiBzdHJpbmc7XG5cbiAgICBpZiAodGhpcy5td1BsYXRmb3JtU2VydmljZS5pc1NlcnZlcigpKSB7XG4gICAgICBpZiAodGhpcy5yZXF1ZXN0ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWVzdCBvYmplY3QgaW4gbm90IHNldC4nKTtcbiAgICAgIH1cblxuICAgICAgbG9jYXRpb25QYXRobmFtZSA9IHRoaXMucmVxdWVzdC5wYXRoO1xuICAgIH0gZWxzZSBpZiAodGhpcy5td1BsYXRmb3JtU2VydmljZS5pc0Jyb3dzZXIoKSkge1xuICAgICAgbG9jYXRpb25QYXRobmFtZSA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwbGF0Zm9ybS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYXRpb25QYXRobmFtZTtcbiAgfVxufVxuIl19