/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { BehaviorSubject } from 'rxjs';
import { MwEnvironmentService } from './mw-environment.service';
import * as i0 from "@angular/core";
import * as i1 from "./mw-environment.service";
import * as i2 from "@angular/platform-browser";
var MwMetaService = /** @class */ (function () {
    function MwMetaService(mwEnvironmentService, title) {
        this.mwEnvironmentService = mwEnvironmentService;
        this.title = title;
        this.envTitlePrefix = 'titlePrefix';
        this.envTitlePostfix = 'titlePostfix';
        this.pageTitleSubject = new BehaviorSubject('');
    }
    /**
     * @param {?} title
     * @return {?}
     */
    MwMetaService.prototype.setTitle = /**
     * @param {?} title
     * @return {?}
     */
    function (title) {
        /** @type {?} */
        var prefix = this.mwEnvironmentService.getValue(this.envTitlePrefix, '');
        /** @type {?} */
        var postfix = this.mwEnvironmentService.getValue(this.envTitlePostfix, '');
        this.title.setTitle("" + prefix + title + postfix);
        this.pageTitleSubject.next(title);
    };
    /**
     * @return {?}
     */
    MwMetaService.prototype.getPageTitle = /**
     * @return {?}
     */
    function () {
        return this.pageTitleSubject.asObservable();
    };
    MwMetaService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    MwMetaService.ctorParameters = function () { return [
        { type: MwEnvironmentService },
        { type: Title }
    ]; };
    /** @nocollapse */ MwMetaService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MwMetaService_Factory() { return new MwMetaService(i0.ɵɵinject(i1.MwEnvironmentService), i0.ɵɵinject(i2.Title)); }, token: MwMetaService, providedIn: "root" });
    return MwMetaService;
}());
export { MwMetaService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MwMetaService.prototype.envTitlePrefix;
    /**
     * @type {?}
     * @private
     */
    MwMetaService.prototype.envTitlePostfix;
    /**
     * @type {?}
     * @private
     */
    MwMetaService.prototype.pageTitleSubject;
    /**
     * @type {?}
     * @private
     */
    MwMetaService.prototype.mwEnvironmentService;
    /**
     * @type {?}
     * @private
     */
    MwMetaService.prototype.title;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXctbWV0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG13LWFuZ3VsYXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tdy1tZXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFFaEU7SUFTRSx1QkFBb0Isb0JBQTBDLEVBQVUsS0FBWTtRQUFoRSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBTztRQUxuRSxtQkFBYyxHQUFHLGFBQWEsQ0FBQztRQUMvQixvQkFBZSxHQUFHLGNBQWMsQ0FBQztRQUUxQyxxQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBUyxFQUFFLENBQUMsQ0FBQztJQUU0QixDQUFDOzs7OztJQUV4RixnQ0FBUTs7OztJQUFSLFVBQVMsS0FBYTs7WUFDZCxNQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQzs7WUFDcEUsT0FBTyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUM7UUFFNUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLE9BQVMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7OztJQUVELG9DQUFZOzs7SUFBWjtRQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzlDLENBQUM7O2dCQXJCRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQUpRLG9CQUFvQjtnQkFGcEIsS0FBSzs7O3dCQURkO0NBMkJDLEFBdEJELElBc0JDO1NBbkJZLGFBQWE7Ozs7OztJQUN4Qix1Q0FBZ0Q7Ozs7O0lBQ2hELHdDQUFrRDs7Ozs7SUFFbEQseUNBQTJEOzs7OztJQUUvQyw2Q0FBa0Q7Ozs7O0lBQUUsOEJBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGl0bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTXdFbnZpcm9ubWVudFNlcnZpY2UgfSBmcm9tICcuL213LWVudmlyb25tZW50LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTXdNZXRhU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZW52VGl0bGVQcmVmaXggPSAndGl0bGVQcmVmaXgnO1xuICBwcml2YXRlIHJlYWRvbmx5IGVudlRpdGxlUG9zdGZpeCA9ICd0aXRsZVBvc3RmaXgnO1xuXG4gIHByaXZhdGUgcGFnZVRpdGxlU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPignJyk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtd0Vudmlyb25tZW50U2VydmljZTogTXdFbnZpcm9ubWVudFNlcnZpY2UsIHByaXZhdGUgdGl0bGU6IFRpdGxlKSB7fVxuXG4gIHNldFRpdGxlKHRpdGxlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBwcmVmaXggPSB0aGlzLm13RW52aXJvbm1lbnRTZXJ2aWNlLmdldFZhbHVlKHRoaXMuZW52VGl0bGVQcmVmaXgsICcnKTtcbiAgICBjb25zdCBwb3N0Zml4ID0gdGhpcy5td0Vudmlyb25tZW50U2VydmljZS5nZXRWYWx1ZSh0aGlzLmVudlRpdGxlUG9zdGZpeCwgJycpO1xuXG4gICAgdGhpcy50aXRsZS5zZXRUaXRsZShgJHtwcmVmaXh9JHt0aXRsZX0ke3Bvc3RmaXh9YCk7XG4gICAgdGhpcy5wYWdlVGl0bGVTdWJqZWN0Lm5leHQodGl0bGUpO1xuICB9XG5cbiAgZ2V0UGFnZVRpdGxlKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMucGFnZVRpdGxlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxufVxuIl19