/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
var MwLoadingService = /** @class */ (function () {
    function MwLoadingService() {
        this.isLoadingSubjectsPool = {};
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    MwLoadingService.prototype.getIsLoading = /**
     * @param {?=} tag
     * @return {?}
     */
    function (tag) {
        if (tag === void 0) { tag = 'general'; }
        this.checkAndInitIsLoadingSubject(tag);
        return this.isLoadingSubjectsPool[tag].asObservable().pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value > 0; })), distinctUntilChanged(), debounceTime(100));
    };
    /**
     * @param {?=} tag
     * @return {?}
     */
    MwLoadingService.prototype.startObservable = /**
     * @param {?=} tag
     * @return {?}
     */
    function (tag) {
        var _this = this;
        if (tag === void 0) { tag = 'general'; }
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        function (subscriber) {
            _this.start(tag);
            subscriber.next();
            subscriber.complete();
            return (/**
             * @return {?}
             */
            function () { });
        }));
    };
    /**
     * @param {?=} tag
     * @return {?}
     */
    MwLoadingService.prototype.start = /**
     * @param {?=} tag
     * @return {?}
     */
    function (tag) {
        if (tag === void 0) { tag = 'general'; }
        this.checkAndInitIsLoadingSubject(tag);
        this.isLoadingSubjectsPool[tag].next(this.isLoadingSubjectsPool[tag].value + 1);
    };
    /**
     * @param {?=} tag
     * @return {?}
     */
    MwLoadingService.prototype.stop = /**
     * @param {?=} tag
     * @return {?}
     */
    function (tag) {
        if (tag === void 0) { tag = 'general'; }
        if (this.isLoadingSubjectsPool[tag] === undefined) {
            throw new Error("Loading subject was not created for tag: " + tag + ".");
        }
        if (this.isLoadingSubjectsPool[tag].value > 0) {
            this.isLoadingSubjectsPool[tag].next(this.isLoadingSubjectsPool[tag].value - 1);
        }
    };
    /**
     * @param {?=} tag
     * @return {?}
     */
    MwLoadingService.prototype.destroy = /**
     * @param {?=} tag
     * @return {?}
     */
    function (tag) {
        if (tag === void 0) { tag = 'general'; }
        if (this.isLoadingSubjectsPool[tag] !== undefined) {
            this.isLoadingSubjectsPool[tag].next(0);
            this.isLoadingSubjectsPool[tag].complete();
            delete this.isLoadingSubjectsPool[tag];
        }
    };
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    MwLoadingService.prototype.checkAndInitIsLoadingSubject = /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        if (this.isLoadingSubjectsPool[tag] === undefined) {
            this.isLoadingSubjectsPool[tag] = new BehaviorSubject(0);
        }
    };
    MwLoadingService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */ MwLoadingService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MwLoadingService_Factory() { return new MwLoadingService(); }, token: MwLoadingService, providedIn: "root" });
    return MwLoadingService;
}());
export { MwLoadingService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MwLoadingService.prototype.isLoadingSubjectsPool;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXctbG9hZGluZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG13LWFuZ3VsYXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tdy1sb2FkaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFekU7SUFBQTtRQUlVLDBCQUFxQixHQUErQyxFQUFFLENBQUM7S0FvRGhGOzs7OztJQWxEQyx1Q0FBWTs7OztJQUFaLFVBQWEsR0FBZTtRQUFmLG9CQUFBLEVBQUEsZUFBZTtRQUMxQixJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUN4RCxHQUFHOzs7O1FBQUMsVUFBQyxLQUFhLElBQUssT0FBQSxLQUFLLEdBQUcsQ0FBQyxFQUFULENBQVMsRUFBQyxFQUNqQyxvQkFBb0IsRUFBRSxFQUN0QixZQUFZLENBQUMsR0FBRyxDQUFDLENBQ2xCLENBQUM7SUFDSixDQUFDOzs7OztJQUVELDBDQUFlOzs7O0lBQWYsVUFBZ0IsR0FBZTtRQUEvQixpQkFTQztRQVRlLG9CQUFBLEVBQUEsZUFBZTtRQUM3QixPQUFPLElBQUksVUFBVTs7OztRQUFDLFVBQUMsVUFBNEI7WUFDakQsS0FBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVoQixVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRXRCOzs7WUFBTyxjQUFPLENBQUMsRUFBQztRQUNsQixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsZ0NBQUs7Ozs7SUFBTCxVQUFNLEdBQWU7UUFBZixvQkFBQSxFQUFBLGVBQWU7UUFDbkIsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXZDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRixDQUFDOzs7OztJQUVELCtCQUFJOzs7O0lBQUosVUFBSyxHQUFlO1FBQWYsb0JBQUEsRUFBQSxlQUFlO1FBQ2xCLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLDhDQUE0QyxHQUFHLE1BQUcsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDakY7SUFDSCxDQUFDOzs7OztJQUVELGtDQUFPOzs7O0lBQVAsVUFBUSxHQUFlO1FBQWYsb0JBQUEsRUFBQSxlQUFlO1FBQ3JCLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNqRCxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMzQyxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7Ozs7OztJQUVPLHVEQUE0Qjs7Ozs7SUFBcEMsVUFBcUMsR0FBVztRQUM5QyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDakQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksZUFBZSxDQUFTLENBQUMsQ0FBQyxDQUFDO1NBQ2xFO0lBQ0gsQ0FBQzs7Z0JBdkRGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzsyQkFORDtDQTREQyxBQXhERCxJQXdEQztTQXJEWSxnQkFBZ0I7Ozs7OztJQUMzQixpREFBK0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YnNjcmliZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE13TG9hZGluZ1NlcnZpY2Uge1xuICBwcml2YXRlIGlzTG9hZGluZ1N1YmplY3RzUG9vbDogeyBbdGFnOiBzdHJpbmddOiBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPiB9ID0ge307XG5cbiAgZ2V0SXNMb2FkaW5nKHRhZyA9ICdnZW5lcmFsJyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHRoaXMuY2hlY2tBbmRJbml0SXNMb2FkaW5nU3ViamVjdCh0YWcpO1xuXG4gICAgcmV0dXJuIHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ10uYXNPYnNlcnZhYmxlKCkucGlwZShcbiAgICAgIG1hcCgodmFsdWU6IG51bWJlcikgPT4gdmFsdWUgPiAwKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICBkZWJvdW5jZVRpbWUoMTAwKSxcbiAgICApO1xuICB9XG5cbiAgc3RhcnRPYnNlcnZhYmxlKHRhZyA9ICdnZW5lcmFsJyk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjx2b2lkPikgPT4ge1xuICAgICAgdGhpcy5zdGFydCh0YWcpO1xuXG4gICAgICBzdWJzY3JpYmVyLm5leHQoKTtcbiAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcblxuICAgICAgcmV0dXJuICgpID0+IHt9O1xuICAgIH0pO1xuICB9XG5cbiAgc3RhcnQodGFnID0gJ2dlbmVyYWwnKTogdm9pZCB7XG4gICAgdGhpcy5jaGVja0FuZEluaXRJc0xvYWRpbmdTdWJqZWN0KHRhZyk7XG5cbiAgICB0aGlzLmlzTG9hZGluZ1N1YmplY3RzUG9vbFt0YWddLm5leHQodGhpcy5pc0xvYWRpbmdTdWJqZWN0c1Bvb2xbdGFnXS52YWx1ZSArIDEpO1xuICB9XG5cbiAgc3RvcCh0YWcgPSAnZ2VuZXJhbCcpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0xvYWRpbmdTdWJqZWN0c1Bvb2xbdGFnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYExvYWRpbmcgc3ViamVjdCB3YXMgbm90IGNyZWF0ZWQgZm9yIHRhZzogJHt0YWd9LmApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzTG9hZGluZ1N1YmplY3RzUG9vbFt0YWddLnZhbHVlID4gMCkge1xuICAgICAgdGhpcy5pc0xvYWRpbmdTdWJqZWN0c1Bvb2xbdGFnXS5uZXh0KHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ10udmFsdWUgLSAxKTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95KHRhZyA9ICdnZW5lcmFsJyk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzTG9hZGluZ1N1YmplY3RzUG9vbFt0YWddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ10ubmV4dCgwKTtcbiAgICAgIHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ10uY29tcGxldGUoKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmlzTG9hZGluZ1N1YmplY3RzUG9vbFt0YWddO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tBbmRJbml0SXNMb2FkaW5nU3ViamVjdCh0YWc6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzTG9hZGluZ1N1YmplY3RzUG9vbFt0YWddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ10gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4oMCk7XG4gICAgfVxuICB9XG59XG4iXX0=