{"version":3,"sources":["ng://@mw-angular/core/lib/tokens/mw-environment.token.ts","ng://@mw-angular/core/lib/mw-core.module.ts","ng://@mw-angular/core/lib/animations/mw-base-animations.ts","ng://@mw-angular/core/lib/services/mw-environment.service.ts","ng://@mw-angular/core/lib/services/mw-error-lock.service.ts","ng://@mw-angular/core/lib/services/mw-html.service.ts","ng://@mw-angular/core/lib/services/mw-loading.service.ts","ng://@mw-angular/core/lib/services/mw-platform.service.ts","ng://@mw-angular/core/lib/services/mw-local-storage.service.ts","ng://@mw-angular/core/lib/services/mw-meta.service.ts","ng://@mw-angular/core/lib/services/mw-request.service.ts"],"names":["MW_ENVIRONMENT","InjectionToken","MwCoreModule","parentModule","Error","forRoot","environment","ngModule","providers","provide","useValue","NgModule","decorators","type","Optional","SkipSelf","mwBaseAnimations","removableChildWrap","trigger","transition","query","animateChild","optional","MwEnvironmentService","mwEnvironment","this","prototype","getValue","key","defaultValue","Injectable","args","providedIn","Inject","MwErrorLockService","errorLockSubject","BehaviorSubject","getErrorLock","asObservable","setErrorLock","errorLock","next","MwHtmlService","rendererFactory","document","renderer","createRenderer","updateTags","selector","attributeName","attributeValue","_this","Array","from","querySelectorAll","forEach","element","setAttribute","RendererFactory2","DOCUMENT","MwLoadingService","isLoadingSubjectsPool","getIsLoading","tag","checkAndInitIsLoadingSubject","pipe","map","value","distinctUntilChanged","debounceTime","startObservable","Observable","subscriber","start","complete","stop","undefined","destroy","MwPlatformService","platformId","isBrowser","isPlatformBrowser","isServer","isPlatformServer","PLATFORM_ID","MwLocalStorageService","mwPlatformService","mwEnvironmentService","envKeyPrefix","serialize","data","JSON","stringify","unserialize","parse","setItem","serializedData","localStorage","getPrefixedKey","getItem","deleteItem","removeItem","clear","MwMetaService","title","envTitlePrefix","envTitlePostfix","pageTitleSubject","setTitle","prefix","postfix","getPageTitle","Title","MwRequestService","request","hasRequest","getHost","host","get","location","getLocationOrigin","locationOrigin","protocol","origin","getLocationPathname","locationPathname","path","pathname","REQUEST"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const MW_ENVIRONMENT = new InjectionToken<{ [key: string]: any }>('mw-environment');\n","import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { MW_ENVIRONMENT } from './tokens/mw-environment.token';\n\n@NgModule()\nexport class MwCoreModule {\n  constructor(@Optional() @SkipSelf() parentModule: MwCoreModule) {\n    if (parentModule) {\n      throw new Error(`MwCoreModule has already been loaded. Import it in the AppModule only.`);\n    }\n  }\n\n  static forRoot(environment: { [key: string]: any }): ModuleWithProviders {\n    return {\n      ngModule: MwCoreModule,\n      providers: [{ provide: MW_ENVIRONMENT, useValue: environment }],\n    };\n  }\n}\n","import { animateChild, AnimationTriggerMetadata, query, transition, trigger } from '@angular/animations';\n\nexport const mwBaseAnimations: {\n  readonly removableChildWrap: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures child animations is called when\n   * closing removing parent from DOM.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  removableChildWrap: trigger('removableChildWrap', [\n    transition(':leave', query('@*', [animateChild()], { optional: true })),\n  ]),\n};\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { MW_ENVIRONMENT } from '../tokens/mw-environment.token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MwEnvironmentService {\n  private readonly environment: any;\n\n  constructor(@Optional() @Inject(MW_ENVIRONMENT) mwEnvironment: any) {\n    this.environment = mwEnvironment !== null ? mwEnvironment : {};\n  }\n\n  getValue(key: string, defaultValue?: any): any {\n    return this.environment[key] || defaultValue;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { MwErrorLock } from '../entities/mw-error-lock';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MwErrorLockService {\n  private errorLockSubject = new BehaviorSubject<MwErrorLock | null>(null);\n\n  getErrorLock(): Observable<MwErrorLock | null> {\n    return this.errorLockSubject.asObservable();\n  }\n\n  setErrorLock(errorLock: MwErrorLock | null): void {\n    this.errorLockSubject.next(errorLock);\n  }\n}\n","import { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MwHtmlService {\n  private renderer: Renderer2;\n\n  constructor(rendererFactory: RendererFactory2, @Inject(DOCUMENT) private document: any) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  updateTags(selector: string, attributeName: string, attributeValue: string): void {\n    Array.from(this.document.querySelectorAll(selector)).forEach((element: any) => {\n      this.renderer.setAttribute(element, attributeName, attributeValue);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscriber } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MwLoadingService {\n  private isLoadingSubjectsPool: { [tag: string]: BehaviorSubject<number> } = {};\n\n  getIsLoading(tag = 'general'): Observable<boolean> {\n    this.checkAndInitIsLoadingSubject(tag);\n\n    return this.isLoadingSubjectsPool[tag].asObservable().pipe(\n      map((value: number) => value > 0),\n      distinctUntilChanged(),\n      debounceTime(100),\n    );\n  }\n\n  startObservable(tag = 'general'): Observable<void> {\n    return new Observable((subscriber: Subscriber<void>) => {\n      this.start(tag);\n\n      subscriber.next();\n      subscriber.complete();\n\n      return () => {};\n    });\n  }\n\n  start(tag = 'general'): void {\n    this.checkAndInitIsLoadingSubject(tag);\n\n    this.isLoadingSubjectsPool[tag].next(this.isLoadingSubjectsPool[tag].value + 1);\n  }\n\n  stop(tag = 'general'): void {\n    if (this.isLoadingSubjectsPool[tag] === undefined) {\n      throw new Error(`Loading subject was not created for tag: ${tag}.`);\n    }\n\n    if (this.isLoadingSubjectsPool[tag].value > 0) {\n      this.isLoadingSubjectsPool[tag].next(this.isLoadingSubjectsPool[tag].value - 1);\n    }\n  }\n\n  destroy(tag = 'general'): void {\n    if (this.isLoadingSubjectsPool[tag] !== undefined) {\n      this.isLoadingSubjectsPool[tag].next(0);\n      this.isLoadingSubjectsPool[tag].complete();\n      delete this.isLoadingSubjectsPool[tag];\n    }\n  }\n\n  private checkAndInitIsLoadingSubject(tag: string): void {\n    if (this.isLoadingSubjectsPool[tag] === undefined) {\n      this.isLoadingSubjectsPool[tag] = new BehaviorSubject<number>(0);\n    }\n  }\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MwPlatformService {\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  isBrowser(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  isServer(): boolean {\n    return isPlatformServer(this.platformId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MwEnvironmentService } from './mw-environment.service';\nimport { MwPlatformService } from './mw-platform.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MwLocalStorageService {\n  private readonly envKeyPrefix = 'localStorageKeyPrefix';\n\n  constructor(private mwPlatformService: MwPlatformService, private mwEnvironmentService: MwEnvironmentService) {}\n\n  private serialize(data: any): string {\n    return JSON.stringify(data);\n  }\n\n  private unserialize<T>(data: string): T {\n    return JSON.parse(data);\n  }\n\n  setItem(key: string, value: any): void {\n    if (this.mwPlatformService.isBrowser()) {\n      const serializedData = this.serialize(value);\n      localStorage.setItem(this.getPrefixedKey(key), serializedData);\n    }\n  }\n\n  getItem<T>(key: string): T | null {\n    if (this.mwPlatformService.isBrowser()) {\n      const value = localStorage.getItem(this.getPrefixedKey(key));\n      if (value !== null) {\n        return this.unserialize<T>(value);\n      }\n    }\n\n    return null;\n  }\n\n  deleteItem(key: string): void {\n    if (this.mwPlatformService.isBrowser()) {\n      localStorage.removeItem(this.getPrefixedKey(key));\n    }\n  }\n\n  clear(): void {\n    if (this.mwPlatformService.isBrowser()) {\n      localStorage.clear();\n    }\n  }\n\n  private getPrefixedKey(key: string): string {\n    return this.mwEnvironmentService.getValue(this.envKeyPrefix, '') + key;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { MwEnvironmentService } from './mw-environment.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MwMetaService {\n  private readonly envTitlePrefix = 'titlePrefix';\n  private readonly envTitlePostfix = 'titlePostfix';\n\n  private pageTitleSubject = new BehaviorSubject<string>('');\n\n  constructor(private mwEnvironmentService: MwEnvironmentService, private title: Title) {}\n\n  setTitle(title: string): void {\n    const prefix = this.mwEnvironmentService.getValue(this.envTitlePrefix, '');\n    const postfix = this.mwEnvironmentService.getValue(this.envTitlePostfix, '');\n\n    this.title.setTitle(`${prefix}${title}${postfix}`);\n    this.pageTitleSubject.next(title);\n  }\n\n  getPageTitle(): Observable<string> {\n    return this.pageTitleSubject.asObservable();\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\nimport { Request } from 'express';\nimport { MwPlatformService } from './mw-platform.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MwRequestService {\n  constructor(\n    private mwPlatformService: MwPlatformService,\n    @Inject(DOCUMENT) private document: any,\n    @Optional()\n    @Inject(REQUEST)\n    private request: Request,\n  ) {}\n\n  hasRequest(): boolean {\n    return (this.mwPlatformService.isServer() && this.request !== null) || this.mwPlatformService.isBrowser();\n  }\n\n  /**\n   * Example localhost:5000 | www.domain.com\n   */\n  getHost(): string {\n    let host: string | undefined;\n\n    if (this.mwPlatformService.isServer()) {\n      if (this.request === null) {\n        throw new Error('Request object in not set.');\n      }\n\n      host = this.request.get('host');\n    } else if (this.mwPlatformService.isBrowser()) {\n      host = this.document.location.host;\n    } else {\n      throw new Error('Unknown platform.');\n    }\n\n    if (typeof host === 'undefined') {\n      throw new Error('Host is undefined.');\n    }\n\n    return host;\n  }\n\n  /**\n   * Example http://localhost:5000 | https://www.domain.com\n   */\n  getLocationOrigin(): string {\n    let locationOrigin: string;\n\n    if (this.mwPlatformService.isServer()) {\n      if (this.request === null) {\n        throw new Error('Request object in not set.');\n      }\n\n      const host = this.request.get('host');\n\n      if (typeof host === 'undefined') {\n        throw new Error('Host is undefined.');\n      }\n\n      const protocol = this.request.protocol;\n      locationOrigin = `${protocol}://${host}`;\n    } else if (this.mwPlatformService.isBrowser()) {\n      locationOrigin = this.document.location.origin;\n    } else {\n      throw new Error('Unknown platform.');\n    }\n\n    return locationOrigin;\n  }\n\n  /**\n   * Example: if url is https://www.domain.com/en/about?qp=1 method returns '/en/about'\n   */\n  getLocationPathname(): string {\n    let locationPathname: string;\n\n    if (this.mwPlatformService.isServer()) {\n      if (this.request === null) {\n        throw new Error('Request object in not set.');\n      }\n\n      locationPathname = this.request.path;\n    } else if (this.mwPlatformService.isBrowser()) {\n      locationPathname = this.document.location.pathname;\n    } else {\n      throw new Error('Unknown platform.');\n    }\n\n    return locationPathname;\n  }\n}\n"]}