/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { Inject, Injectable, Optional } from '@angular/core';
import { REQUEST } from '@nguniversal/express-engine/tokens';
import { MwPlatformService } from './mw-platform.service';
import * as i0 from "@angular/core";
import * as i1 from "./mw-platform.service";
import * as i2 from "@angular/common";
import * as i3 from "@nguniversal/express-engine/tokens";
export class MwRequestService {
    /**
     * @param {?} mwPlatformService
     * @param {?} document
     * @param {?} request
     */
    constructor(mwPlatformService, document, request) {
        this.mwPlatformService = mwPlatformService;
        this.document = document;
        this.request = request;
    }
    /**
     * @return {?}
     */
    hasRequest() {
        return (this.mwPlatformService.isServer() && this.request !== null) || this.mwPlatformService.isBrowser();
    }
    /**
     * Example localhost:5000 | www.domain.com
     * @return {?}
     */
    getHost() {
        /** @type {?} */
        let host;
        if (this.mwPlatformService.isServer()) {
            if (this.request === null) {
                throw new Error('Request object in not set.');
            }
            host = this.request.get('host');
        }
        else if (this.mwPlatformService.isBrowser()) {
            host = this.document.location.host;
        }
        else {
            throw new Error('Unknown platform.');
        }
        if (typeof host === 'undefined') {
            throw new Error('Host is undefined.');
        }
        return host;
    }
    /**
     * Example http://localhost:5000 | https://www.domain.com
     * @return {?}
     */
    getLocationOrigin() {
        /** @type {?} */
        let locationOrigin;
        if (this.mwPlatformService.isServer()) {
            if (this.request === null) {
                throw new Error('Request object in not set.');
            }
            /** @type {?} */
            const host = this.request.get('host');
            if (typeof host === 'undefined') {
                throw new Error('Host is undefined.');
            }
            /** @type {?} */
            const protocol = this.request.protocol;
            locationOrigin = `${protocol}://${host}`;
        }
        else if (this.mwPlatformService.isBrowser()) {
            locationOrigin = this.document.location.origin;
        }
        else {
            throw new Error('Unknown platform.');
        }
        return locationOrigin;
    }
    /**
     * Example: if url is https://www.domain.com/en/about?qp=1 method returns '/en/about'
     * @return {?}
     */
    getLocationPathname() {
        /** @type {?} */
        let locationPathname;
        if (this.mwPlatformService.isServer()) {
            if (this.request === null) {
                throw new Error('Request object in not set.');
            }
            locationPathname = this.request.path;
        }
        else if (this.mwPlatformService.isBrowser()) {
            locationPathname = this.document.location.pathname;
        }
        else {
            throw new Error('Unknown platform.');
        }
        return locationPathname;
    }
}
MwRequestService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MwRequestService.ctorParameters = () => [
    { type: MwPlatformService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [REQUEST,] }] }
];
/** @nocollapse */ MwRequestService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MwRequestService_Factory() { return new MwRequestService(i0.ɵɵinject(i1.MwPlatformService), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(i3.REQUEST, 8)); }, token: MwRequestService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    MwRequestService.prototype.mwPlatformService;
    /**
     * @type {?}
     * @private
     */
    MwRequestService.prototype.document;
    /**
     * @type {?}
     * @private
     */
    MwRequestService.prototype.request;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXctcmVxdWVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG13LWFuZ3VsYXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tdy1yZXF1ZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRTdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7OztBQUsxRCxNQUFNLE9BQU8sZ0JBQWdCOzs7Ozs7SUFDM0IsWUFDVSxpQkFBb0MsRUFDbEIsUUFBYSxFQUcvQixPQUFnQjtRQUpoQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ2xCLGFBQVEsR0FBUixRQUFRLENBQUs7UUFHL0IsWUFBTyxHQUFQLE9BQU8sQ0FBUztJQUN2QixDQUFDOzs7O0lBRUosVUFBVTtRQUNSLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDNUcsQ0FBQzs7Ozs7SUFLRCxPQUFPOztZQUNELElBQXdCO1FBRTVCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3JDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQzthQUMvQztZQUVELElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqQzthQUFNLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQzdDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7U0FDcEM7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUN0QztRQUVELElBQUksT0FBTyxJQUFJLEtBQUssV0FBVyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFLRCxpQkFBaUI7O1lBQ1gsY0FBc0I7UUFFMUIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDckMsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtnQkFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO2FBQy9DOztrQkFFSyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBRXJDLElBQUksT0FBTyxJQUFJLEtBQUssV0FBVyxFQUFFO2dCQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7YUFDdkM7O2tCQUVLLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVE7WUFDdEMsY0FBYyxHQUFHLEdBQUcsUUFBUSxNQUFNLElBQUksRUFBRSxDQUFDO1NBQzFDO2FBQU0sSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDN0MsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztTQUNoRDthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFLRCxtQkFBbUI7O1lBQ2IsZ0JBQXdCO1FBRTVCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3JDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQzthQUMvQztZQUVELGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1NBQ3RDO2FBQU0sSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDN0MsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1NBQ3BEO2FBQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDdEM7UUFFRCxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7OztZQXhGRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFKUSxpQkFBaUI7NENBUXJCLE1BQU0sU0FBQyxRQUFROzRDQUNmLFFBQVEsWUFDUixNQUFNLFNBQUMsT0FBTzs7Ozs7Ozs7SUFIZiw2Q0FBNEM7Ozs7O0lBQzVDLG9DQUF1Qzs7Ozs7SUFDdkMsbUNBRXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUkVRVUVTVCB9IGZyb20gJ0BuZ3VuaXZlcnNhbC9leHByZXNzLWVuZ2luZS90b2tlbnMnO1xuaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgTXdQbGF0Zm9ybVNlcnZpY2UgfSBmcm9tICcuL213LXBsYXRmb3JtLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTXdSZXF1ZXN0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbXdQbGF0Zm9ybVNlcnZpY2U6IE13UGxhdGZvcm1TZXJ2aWNlLFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoUkVRVUVTVClcbiAgICBwcml2YXRlIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICkge31cblxuICBoYXNSZXF1ZXN0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5td1BsYXRmb3JtU2VydmljZS5pc1NlcnZlcigpICYmIHRoaXMucmVxdWVzdCAhPT0gbnVsbCkgfHwgdGhpcy5td1BsYXRmb3JtU2VydmljZS5pc0Jyb3dzZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGFtcGxlIGxvY2FsaG9zdDo1MDAwIHwgd3d3LmRvbWFpbi5jb21cbiAgICovXG4gIGdldEhvc3QoKTogc3RyaW5nIHtcbiAgICBsZXQgaG9zdDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgaWYgKHRoaXMubXdQbGF0Zm9ybVNlcnZpY2UuaXNTZXJ2ZXIoKSkge1xuICAgICAgaWYgKHRoaXMucmVxdWVzdCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVlc3Qgb2JqZWN0IGluIG5vdCBzZXQuJyk7XG4gICAgICB9XG5cbiAgICAgIGhvc3QgPSB0aGlzLnJlcXVlc3QuZ2V0KCdob3N0Jyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm13UGxhdGZvcm1TZXJ2aWNlLmlzQnJvd3NlcigpKSB7XG4gICAgICBob3N0ID0gdGhpcy5kb2N1bWVudC5sb2NhdGlvbi5ob3N0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcGxhdGZvcm0uJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBob3N0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdIb3N0IGlzIHVuZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9zdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGFtcGxlIGh0dHA6Ly9sb2NhbGhvc3Q6NTAwMCB8IGh0dHBzOi8vd3d3LmRvbWFpbi5jb21cbiAgICovXG4gIGdldExvY2F0aW9uT3JpZ2luKCk6IHN0cmluZyB7XG4gICAgbGV0IGxvY2F0aW9uT3JpZ2luOiBzdHJpbmc7XG5cbiAgICBpZiAodGhpcy5td1BsYXRmb3JtU2VydmljZS5pc1NlcnZlcigpKSB7XG4gICAgICBpZiAodGhpcy5yZXF1ZXN0ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWVzdCBvYmplY3QgaW4gbm90IHNldC4nKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaG9zdCA9IHRoaXMucmVxdWVzdC5nZXQoJ2hvc3QnKTtcblxuICAgICAgaWYgKHR5cGVvZiBob3N0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hvc3QgaXMgdW5kZWZpbmVkLicpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm90b2NvbCA9IHRoaXMucmVxdWVzdC5wcm90b2NvbDtcbiAgICAgIGxvY2F0aW9uT3JpZ2luID0gYCR7cHJvdG9jb2x9Oi8vJHtob3N0fWA7XG4gICAgfSBlbHNlIGlmICh0aGlzLm13UGxhdGZvcm1TZXJ2aWNlLmlzQnJvd3NlcigpKSB7XG4gICAgICBsb2NhdGlvbk9yaWdpbiA9IHRoaXMuZG9jdW1lbnQubG9jYXRpb24ub3JpZ2luO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcGxhdGZvcm0uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvY2F0aW9uT3JpZ2luO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4YW1wbGU6IGlmIHVybCBpcyBodHRwczovL3d3dy5kb21haW4uY29tL2VuL2Fib3V0P3FwPTEgbWV0aG9kIHJldHVybnMgJy9lbi9hYm91dCdcbiAgICovXG4gIGdldExvY2F0aW9uUGF0aG5hbWUoKTogc3RyaW5nIHtcbiAgICBsZXQgbG9jYXRpb25QYXRobmFtZTogc3RyaW5nO1xuXG4gICAgaWYgKHRoaXMubXdQbGF0Zm9ybVNlcnZpY2UuaXNTZXJ2ZXIoKSkge1xuICAgICAgaWYgKHRoaXMucmVxdWVzdCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVlc3Qgb2JqZWN0IGluIG5vdCBzZXQuJyk7XG4gICAgICB9XG5cbiAgICAgIGxvY2F0aW9uUGF0aG5hbWUgPSB0aGlzLnJlcXVlc3QucGF0aDtcbiAgICB9IGVsc2UgaWYgKHRoaXMubXdQbGF0Zm9ybVNlcnZpY2UuaXNCcm93c2VyKCkpIHtcbiAgICAgIGxvY2F0aW9uUGF0aG5hbWUgPSB0aGlzLmRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcGxhdGZvcm0uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvY2F0aW9uUGF0aG5hbWU7XG4gIH1cbn1cbiJdfQ==