/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class MwLoadingService {
    constructor() {
        this.isLoadingSubjectsPool = {};
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    getIsLoading(tag = 'general') {
        this.checkAndInitIsLoadingSubject(tag);
        return this.isLoadingSubjectsPool[tag].asObservable().pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        (value) => value > 0)), distinctUntilChanged(), debounceTime(100));
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    startObservable(tag = 'general') {
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        (subscriber) => {
            this.start(tag);
            subscriber.next();
            subscriber.complete();
            return (/**
             * @return {?}
             */
            () => { });
        }));
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    start(tag = 'general') {
        this.checkAndInitIsLoadingSubject(tag);
        this.isLoadingSubjectsPool[tag].next(this.isLoadingSubjectsPool[tag].value + 1);
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    stop(tag = 'general') {
        if (this.isLoadingSubjectsPool[tag] === undefined) {
            throw new Error(`Loading subject was not created for tag: ${tag}.`);
        }
        if (this.isLoadingSubjectsPool[tag].value > 0) {
            this.isLoadingSubjectsPool[tag].next(this.isLoadingSubjectsPool[tag].value - 1);
        }
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    destroy(tag = 'general') {
        if (this.isLoadingSubjectsPool[tag] !== undefined) {
            this.isLoadingSubjectsPool[tag].next(0);
            this.isLoadingSubjectsPool[tag].complete();
            delete this.isLoadingSubjectsPool[tag];
        }
    }
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    checkAndInitIsLoadingSubject(tag) {
        if (this.isLoadingSubjectsPool[tag] === undefined) {
            this.isLoadingSubjectsPool[tag] = new BehaviorSubject(0);
        }
    }
}
MwLoadingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */ MwLoadingService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MwLoadingService_Factory() { return new MwLoadingService(); }, token: MwLoadingService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    MwLoadingService.prototype.isLoadingSubjectsPool;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXctbG9hZGluZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG13LWFuZ3VsYXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tdy1sb2FkaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLekUsTUFBTSxPQUFPLGdCQUFnQjtJQUg3QjtRQUlVLDBCQUFxQixHQUErQyxFQUFFLENBQUM7S0FvRGhGOzs7OztJQWxEQyxZQUFZLENBQUMsR0FBRyxHQUFHLFNBQVM7UUFDMUIsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXZDLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FDeEQsR0FBRzs7OztRQUFDLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFDLEVBQ2pDLG9CQUFvQixFQUFFLEVBQ3RCLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FDbEIsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRUQsZUFBZSxDQUFDLEdBQUcsR0FBRyxTQUFTO1FBQzdCLE9BQU8sSUFBSSxVQUFVOzs7O1FBQUMsQ0FBQyxVQUE0QixFQUFFLEVBQUU7WUFDckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVoQixVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRXRCOzs7WUFBTyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUM7UUFDbEIsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELEtBQUssQ0FBQyxHQUFHLEdBQUcsU0FBUztRQUNuQixJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTO1FBQ2xCLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDakY7SUFDSCxDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxHQUFHLEdBQUcsU0FBUztRQUNyQixJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDakQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDM0MsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDOzs7Ozs7SUFFTyw0QkFBNEIsQ0FBQyxHQUFXO1FBQzlDLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNqRCxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQVMsQ0FBQyxDQUFDLENBQUM7U0FDbEU7SUFDSCxDQUFDOzs7WUF2REYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7OztJQUVDLGlEQUErRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaWJlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTXdMb2FkaW5nU2VydmljZSB7XG4gIHByaXZhdGUgaXNMb2FkaW5nU3ViamVjdHNQb29sOiB7IFt0YWc6IHN0cmluZ106IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+IH0gPSB7fTtcblxuICBnZXRJc0xvYWRpbmcodGFnID0gJ2dlbmVyYWwnKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgdGhpcy5jaGVja0FuZEluaXRJc0xvYWRpbmdTdWJqZWN0KHRhZyk7XG5cbiAgICByZXR1cm4gdGhpcy5pc0xvYWRpbmdTdWJqZWN0c1Bvb2xbdGFnXS5hc09ic2VydmFibGUoKS5waXBlKFxuICAgICAgbWFwKCh2YWx1ZTogbnVtYmVyKSA9PiB2YWx1ZSA+IDApLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIGRlYm91bmNlVGltZSgxMDApLFxuICAgICk7XG4gIH1cblxuICBzdGFydE9ic2VydmFibGUodGFnID0gJ2dlbmVyYWwnKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPHZvaWQ+KSA9PiB7XG4gICAgICB0aGlzLnN0YXJ0KHRhZyk7XG5cbiAgICAgIHN1YnNjcmliZXIubmV4dCgpO1xuICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuXG4gICAgICByZXR1cm4gKCkgPT4ge307XG4gICAgfSk7XG4gIH1cblxuICBzdGFydCh0YWcgPSAnZ2VuZXJhbCcpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrQW5kSW5pdElzTG9hZGluZ1N1YmplY3QodGFnKTtcblxuICAgIHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ10ubmV4dCh0aGlzLmlzTG9hZGluZ1N1YmplY3RzUG9vbFt0YWddLnZhbHVlICsgMSk7XG4gIH1cblxuICBzdG9wKHRhZyA9ICdnZW5lcmFsJyk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzTG9hZGluZ1N1YmplY3RzUG9vbFt0YWddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTG9hZGluZyBzdWJqZWN0IHdhcyBub3QgY3JlYXRlZCBmb3IgdGFnOiAke3RhZ30uYCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ10udmFsdWUgPiAwKSB7XG4gICAgICB0aGlzLmlzTG9hZGluZ1N1YmplY3RzUG9vbFt0YWddLm5leHQodGhpcy5pc0xvYWRpbmdTdWJqZWN0c1Bvb2xbdGFnXS52YWx1ZSAtIDEpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3kodGFnID0gJ2dlbmVyYWwnKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0xvYWRpbmdTdWJqZWN0c1Bvb2xbdGFnXS5uZXh0KDApO1xuICAgICAgdGhpcy5pc0xvYWRpbmdTdWJqZWN0c1Bvb2xbdGFnXS5jb21wbGV0ZSgpO1xuICAgICAgZGVsZXRlIHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ107XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0FuZEluaXRJc0xvYWRpbmdTdWJqZWN0KHRhZzogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNMb2FkaW5nU3ViamVjdHNQb29sW3RhZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0xvYWRpbmdTdWJqZWN0c1Bvb2xbdGFnXSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPigwKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==