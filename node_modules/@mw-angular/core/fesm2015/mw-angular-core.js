import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, RendererFactory2, PLATFORM_ID } from '@angular/core';
import { trigger, transition, query, animateChild } from '@angular/animations';
import { BehaviorSubject, Observable } from 'rxjs';
import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';
import { map, distinctUntilChanged, debounceTime } from 'rxjs/operators';
import { Title } from '@angular/platform-browser';
import { REQUEST } from '@nguniversal/express-engine/tokens';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MW_ENVIRONMENT = new InjectionToken('mw-environment');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MwCoreModule {
    /**
     * @param {?} parentModule
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error(`MwCoreModule has already been loaded. Import it in the AppModule only.`);
        }
    }
    /**
     * @param {?} environment
     * @return {?}
     */
    static forRoot(environment) {
        return {
            ngModule: MwCoreModule,
            providers: [{ provide: MW_ENVIRONMENT, useValue: environment }],
        };
    }
}
MwCoreModule.decorators = [
    { type: NgModule }
];
/** @nocollapse */
MwCoreModule.ctorParameters = () => [
    { type: MwCoreModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const mwBaseAnimations = {
    /**
     * This animation ensures child animations is called when
     * closing removing parent from DOM.
     * This is needed due to https://github.com/angular/angular/issues/23302
     */
    removableChildWrap: trigger('removableChildWrap', [
        transition(':leave', query('@*', [animateChild()], { optional: true })),
    ]),
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MwEnvironmentService {
    /**
     * @param {?} mwEnvironment
     */
    constructor(mwEnvironment) {
        this.environment = mwEnvironment !== null ? mwEnvironment : {};
    }
    /**
     * @param {?} key
     * @param {?=} defaultValue
     * @return {?}
     */
    getValue(key, defaultValue) {
        return this.environment[key] || defaultValue;
    }
}
MwEnvironmentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MwEnvironmentService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MW_ENVIRONMENT,] }] }
];
/** @nocollapse */ MwEnvironmentService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MwEnvironmentService_Factory() { return new MwEnvironmentService(ɵɵinject(MW_ENVIRONMENT, 8)); }, token: MwEnvironmentService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MwErrorLockService {
    constructor() {
        this.errorLockSubject = new BehaviorSubject(null);
    }
    /**
     * @return {?}
     */
    getErrorLock() {
        return this.errorLockSubject.asObservable();
    }
    /**
     * @param {?} errorLock
     * @return {?}
     */
    setErrorLock(errorLock) {
        this.errorLockSubject.next(errorLock);
    }
}
MwErrorLockService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */ MwErrorLockService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MwErrorLockService_Factory() { return new MwErrorLockService(); }, token: MwErrorLockService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MwHtmlService {
    /**
     * @param {?} rendererFactory
     * @param {?} document
     */
    constructor(rendererFactory, document) {
        this.document = document;
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * @param {?} selector
     * @param {?} attributeName
     * @param {?} attributeValue
     * @return {?}
     */
    updateTags(selector, attributeName, attributeValue) {
        Array.from(this.document.querySelectorAll(selector)).forEach((/**
         * @param {?} element
         * @return {?}
         */
        (element) => {
            this.renderer.setAttribute(element, attributeName, attributeValue);
        }));
    }
}
MwHtmlService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MwHtmlService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ MwHtmlService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MwHtmlService_Factory() { return new MwHtmlService(ɵɵinject(RendererFactory2), ɵɵinject(DOCUMENT)); }, token: MwHtmlService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MwLoadingService {
    constructor() {
        this.isLoadingSubjectsPool = {};
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    getIsLoading(tag = 'general') {
        this.checkAndInitIsLoadingSubject(tag);
        return this.isLoadingSubjectsPool[tag].asObservable().pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        (value) => value > 0)), distinctUntilChanged(), debounceTime(100));
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    startObservable(tag = 'general') {
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        (subscriber) => {
            this.start(tag);
            subscriber.next();
            subscriber.complete();
            return (/**
             * @return {?}
             */
            () => { });
        }));
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    start(tag = 'general') {
        this.checkAndInitIsLoadingSubject(tag);
        this.isLoadingSubjectsPool[tag].next(this.isLoadingSubjectsPool[tag].value + 1);
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    stop(tag = 'general') {
        if (this.isLoadingSubjectsPool[tag] === undefined) {
            throw new Error(`Loading subject was not created for tag: ${tag}.`);
        }
        if (this.isLoadingSubjectsPool[tag].value > 0) {
            this.isLoadingSubjectsPool[tag].next(this.isLoadingSubjectsPool[tag].value - 1);
        }
    }
    /**
     * @param {?=} tag
     * @return {?}
     */
    destroy(tag = 'general') {
        if (this.isLoadingSubjectsPool[tag] !== undefined) {
            this.isLoadingSubjectsPool[tag].next(0);
            this.isLoadingSubjectsPool[tag].complete();
            delete this.isLoadingSubjectsPool[tag];
        }
    }
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    checkAndInitIsLoadingSubject(tag) {
        if (this.isLoadingSubjectsPool[tag] === undefined) {
            this.isLoadingSubjectsPool[tag] = new BehaviorSubject(0);
        }
    }
}
MwLoadingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */ MwLoadingService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MwLoadingService_Factory() { return new MwLoadingService(); }, token: MwLoadingService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MwPlatformService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    isBrowser() {
        return isPlatformBrowser(this.platformId);
    }
    /**
     * @return {?}
     */
    isServer() {
        return isPlatformServer(this.platformId);
    }
}
MwPlatformService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MwPlatformService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ MwPlatformService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MwPlatformService_Factory() { return new MwPlatformService(ɵɵinject(PLATFORM_ID)); }, token: MwPlatformService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MwLocalStorageService {
    /**
     * @param {?} mwPlatformService
     * @param {?} mwEnvironmentService
     */
    constructor(mwPlatformService, mwEnvironmentService) {
        this.mwPlatformService = mwPlatformService;
        this.mwEnvironmentService = mwEnvironmentService;
        this.envKeyPrefix = 'localStorageKeyPrefix';
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    serialize(data) {
        return JSON.stringify(data);
    }
    /**
     * @private
     * @template T
     * @param {?} data
     * @return {?}
     */
    unserialize(data) {
        return JSON.parse(data);
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        if (this.mwPlatformService.isBrowser()) {
            /** @type {?} */
            const serializedData = this.serialize(value);
            localStorage.setItem(this.getPrefixedKey(key), serializedData);
        }
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        if (this.mwPlatformService.isBrowser()) {
            /** @type {?} */
            const value = localStorage.getItem(this.getPrefixedKey(key));
            if (value !== null) {
                return this.unserialize(value);
            }
        }
        return null;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    deleteItem(key) {
        if (this.mwPlatformService.isBrowser()) {
            localStorage.removeItem(this.getPrefixedKey(key));
        }
    }
    /**
     * @return {?}
     */
    clear() {
        if (this.mwPlatformService.isBrowser()) {
            localStorage.clear();
        }
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    getPrefixedKey(key) {
        return this.mwEnvironmentService.getValue(this.envKeyPrefix, '') + key;
    }
}
MwLocalStorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MwLocalStorageService.ctorParameters = () => [
    { type: MwPlatformService },
    { type: MwEnvironmentService }
];
/** @nocollapse */ MwLocalStorageService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MwLocalStorageService_Factory() { return new MwLocalStorageService(ɵɵinject(MwPlatformService), ɵɵinject(MwEnvironmentService)); }, token: MwLocalStorageService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MwMetaService {
    /**
     * @param {?} mwEnvironmentService
     * @param {?} title
     */
    constructor(mwEnvironmentService, title) {
        this.mwEnvironmentService = mwEnvironmentService;
        this.title = title;
        this.envTitlePrefix = 'titlePrefix';
        this.envTitlePostfix = 'titlePostfix';
        this.pageTitleSubject = new BehaviorSubject('');
    }
    /**
     * @param {?} title
     * @return {?}
     */
    setTitle(title) {
        /** @type {?} */
        const prefix = this.mwEnvironmentService.getValue(this.envTitlePrefix, '');
        /** @type {?} */
        const postfix = this.mwEnvironmentService.getValue(this.envTitlePostfix, '');
        this.title.setTitle(`${prefix}${title}${postfix}`);
        this.pageTitleSubject.next(title);
    }
    /**
     * @return {?}
     */
    getPageTitle() {
        return this.pageTitleSubject.asObservable();
    }
}
MwMetaService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MwMetaService.ctorParameters = () => [
    { type: MwEnvironmentService },
    { type: Title }
];
/** @nocollapse */ MwMetaService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MwMetaService_Factory() { return new MwMetaService(ɵɵinject(MwEnvironmentService), ɵɵinject(Title)); }, token: MwMetaService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MwRequestService {
    /**
     * @param {?} mwPlatformService
     * @param {?} document
     * @param {?} request
     */
    constructor(mwPlatformService, document, request) {
        this.mwPlatformService = mwPlatformService;
        this.document = document;
        this.request = request;
    }
    /**
     * @return {?}
     */
    hasRequest() {
        return (this.mwPlatformService.isServer() && this.request !== null) || this.mwPlatformService.isBrowser();
    }
    /**
     * Example localhost:5000 | www.domain.com
     * @return {?}
     */
    getHost() {
        /** @type {?} */
        let host;
        if (this.mwPlatformService.isServer()) {
            if (this.request === null) {
                throw new Error('Request object in not set.');
            }
            host = this.request.get('host');
        }
        else if (this.mwPlatformService.isBrowser()) {
            host = this.document.location.host;
        }
        else {
            throw new Error('Unknown platform.');
        }
        if (typeof host === 'undefined') {
            throw new Error('Host is undefined.');
        }
        return host;
    }
    /**
     * Example http://localhost:5000 | https://www.domain.com
     * @return {?}
     */
    getLocationOrigin() {
        /** @type {?} */
        let locationOrigin;
        if (this.mwPlatformService.isServer()) {
            if (this.request === null) {
                throw new Error('Request object in not set.');
            }
            /** @type {?} */
            const host = this.request.get('host');
            if (typeof host === 'undefined') {
                throw new Error('Host is undefined.');
            }
            /** @type {?} */
            const protocol = this.request.protocol;
            locationOrigin = `${protocol}://${host}`;
        }
        else if (this.mwPlatformService.isBrowser()) {
            locationOrigin = this.document.location.origin;
        }
        else {
            throw new Error('Unknown platform.');
        }
        return locationOrigin;
    }
    /**
     * Example: if url is https://www.domain.com/en/about?qp=1 method returns '/en/about'
     * @return {?}
     */
    getLocationPathname() {
        /** @type {?} */
        let locationPathname;
        if (this.mwPlatformService.isServer()) {
            if (this.request === null) {
                throw new Error('Request object in not set.');
            }
            locationPathname = this.request.path;
        }
        else if (this.mwPlatformService.isBrowser()) {
            locationPathname = this.document.location.pathname;
        }
        else {
            throw new Error('Unknown platform.');
        }
        return locationPathname;
    }
}
MwRequestService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MwRequestService.ctorParameters = () => [
    { type: MwPlatformService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [REQUEST,] }] }
];
/** @nocollapse */ MwRequestService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MwRequestService_Factory() { return new MwRequestService(ɵɵinject(MwPlatformService), ɵɵinject(DOCUMENT), ɵɵinject(REQUEST, 8)); }, token: MwRequestService, providedIn: "root" });

export { MwCoreModule, MwEnvironmentService, MwErrorLockService, MwHtmlService, MwLoadingService, MwLocalStorageService, MwMetaService, MwPlatformService, MwRequestService, mwBaseAnimations, MW_ENVIRONMENT as ɵa };
//# sourceMappingURL=mw-angular-core.js.map
